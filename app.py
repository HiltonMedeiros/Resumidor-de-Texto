# app.py (vers√£o com python-dotenv)

import streamlit as st
import requests
import os
from dotenv import load_dotenv

# --- CONFIGURA√á√ÉO INICIAL E CARREGAMENTO DA CHAVE ---

# A configura√ß√£o da p√°gina deve ser a primeira chamada do Streamlit no script.
st.set_page_config(
    page_title="Resumo de Texto com IA (Gemini)",
    page_icon="‚ú®",
    layout="wide"
)

# Carrega as vari√°veis do arquivo .env para o ambiente
load_dotenv()

# Pega a chave da API do ambiente (local ou do deploy)
API_KEY = os.getenv("API_KEY")

# Verifica imediatamente se a chave da API foi encontrada
if not API_KEY:
    st.error(
        "Chave da API (API_KEY) n√£o encontrada! Verifique seu arquivo .env ou as configura√ß√µes de segredos no deploy.")
    st.stop()  # Interrompe a execu√ß√£o se a chave n√£o for encontrada


# --- FUN√á√ÉO PARA CHAMADA DA API ---

def chamar_api_gemini(texto_para_resumir: str) -> str:
    """
    Envia o texto para a API do Google Gemini e retorna o resumo.

    Args:
        texto_para_resumir: O texto que ser√° enviado para a sumariza√ß√£o.

    Returns:
        O texto resumido pela IA ou uma mensagem de erro.
    """
    # Monta a URL da API com a chave (agora usando a vari√°vel API_KEY)
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={API_KEY}"

    # Headers da requisi√ß√£o
    headers = {"Content-Type": "application/json"}

    # Corpo da requisi√ß√£o (payload)
    prompt = f"Aja como um especialista em sumariza√ß√£o de textos. Resuma o seguinte texto de forma clara, concisa e em portugu√™s:\n\n---\n\n{texto_para_resumir}"
    body = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }

    # Faz a chamada POST para a API
    response = requests.post(url, headers=headers, json=body, timeout=300)

    # --- TRATAMENTO DA RESPOSTA ---
    if response.status_code == 200:
        try:
            resultado = response.json()
            resumo = resultado.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text")
            if resumo:
                return resumo
            else:
                return f"Erro: A API n√£o retornou um resumo v√°lido. Resposta: {resultado}"
        except (KeyError, IndexError) as e:
            return f"Erro ao processar a resposta da API: {e}. Resposta recebida: {response.text}"
    else:
        return f"Erro na API: {response.status_code} - {response.text}"


# --- INTERFACE DO USU√ÅRIO (STREAMLIT) ---

st.title("‚ú® Resumidor de Textos com Gemini AI")
st.markdown("Cole um texto no campo abaixo e a IA do Google criar√° um resumo para voc√™.")

# √Årea de texto para o usu√°rio
texto_original = st.text_area("Texto para resumir:", height=250,
                              placeholder="Cole aqui o artigo, e-mail ou qualquer outro texto...")

# Bot√£o para iniciar o processo
if st.button("Gerar Resumo", type="primary"):
    if not texto_original.strip():
        st.warning("Por favor, cole um texto antes de gerar o resumo.")
    else:
        with st.spinner("üß† A IA est√° pensando e gerando o resumo..."):
            resumo_gerado = chamar_api_gemini(texto_original)
            st.subheader("üìå Resumo Gerado:")

            if resumo_gerado.startswith("Erro na API:") or resumo_gerado.startswith("Erro ao processar"):
                st.error(resumo_gerado)
            else:
                st.success(resumo_gerado)